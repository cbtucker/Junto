/**
 * Copyright 2005 Macromedia, Inc. All rights reserved.   
 * 
 * connectionlight.asc 
 * Moving or modifying this file may affect the applications installed on this server. 
 */

try { var dummy = FCConnectionLight; } catch ( e ) { // #ifndef FCConnectionLight

	load( "components/component.asc" );

	/**
	 * Connection settings component that provides for measuring and managing
	 * connection bandwidth.
	 */
	FCConnectionLight = function(name) {
		this.init(name);
	}
	
	// Extend FCConnectionLight from FCComponent
	FCConnectionLight.prototype = new FCComponent("FCConnectionLight", FCConnectionLight);

	///////////////////////////////////////////////////////////////////////////
	// onXXX events that are called at appropriate times
	
	/** This is called when the application about to stop */
	FCConnectionLight.prototype.onAppStop = function() {
	}


	/** This is called when a client disconnects */
	FCConnectionLight.prototype.onDisconnect = function( client ) {
		this.cleanup( this.getClientLocalStorage(client) );
		this.releaseLocalStorage(client);
	}
	
	
	///////////////////////////////////////////////////////////////////////////
	// Methods that a client side component calls explicitly
	
	/**
	 * The first method called by a client
	 *
	 * @param client	client object
	 * @param interval	how often to perform automatic bandwidth measurements
	 */
	FCConnectionLight.prototype.connect = function( client, interval ) {
		this.setPingInterval( client, interval );
	}
	
	/**
	 * Called by the client to set its preferences
	 *
	 * @param client	client object
	 * @param interval	how often to perform automatic bandwidth measurements
	 */
	FCConnectionLight.prototype.setPingInterval = function( client, interval ) {
		// Get our local storage area specific to the client
		var clocal = this.getClientLocalStorage(client);
		
		// Set the measurement interval - 0 or less disables automatic measurement
		clocal.interval = interval;
		if ( interval > 0 ) {
//trace( "measuring every " + interval + " ms" );
			clocal.timer = setInterval( this, "ping", interval, client );
		} else if ( clocal.timer != null )
			this.cleanup( clocal );
	}
	
	/**
	 * Last method called by the client
	 * 
	 * @param client	client object
	 */
	FCConnectionLight.prototype.close = function( client ) {
		this.cleanup( this.getClientLocalStorage(client) );
	}
	

	///////////////////////////////////////////////////////////////////////////
	// Helper and utility methods

	/**
	 * This method is a setInterval callback for automatic bandwidth measurement
	 *
	 * @param client	client object
	 */
	FCConnectionLight.prototype.ping = function(client) {
		var clocal = this.getClientLocalStorage(client);

//trace( "ping called" );
		// Send bytes per second and rtt to client
		var s = client.getStats();
		if (clocal.pinged && s != null)
		{
			var down = s.bytes_out - clocal.bytes_out;
			var up = s.bytes_in - clocal.bytes_in;
			client.call(this.callPrefix + "update", 0, s.ping_rtt, up/clocal.interval, down/clocal.interval);
		}
		clocal.bytes_out = s.bytes_out;
		clocal.bytes_in = s.bytes_in;

		// Remeasure rtt
		client.ping();
		clocal.pinged = true;
	}

	/**
	 * Cleanup any timers that have been set
	 *
	 * @param clocal	client local storage
	 */
	FCConnectionLight.prototype.cleanup = function(clocal) {
		clearInterval( clocal.timer );
		clocal.timer = null;
	}
		
	// Insert additional methods here
	
	trace( "ConnectionLight loaded successfully." );

} // #endif
