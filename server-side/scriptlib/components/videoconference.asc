/**
 * Copyright © 2002 Macromedia, Inc. All rights reserved.   
 * 
 * videoconference.asc 
 * Moving or modifying this file may affect the applications installed on this server. 
 */

try { var dummy = FCVideoConference; } catch ( e ) { // #ifndef FCVideoConference

	load( "components/component.asc" );
	load( "components/avpresence.asc" );
	
	/**
	 * Multi-user audio video conference component
	 */
	FCVideoConference = function( name ) {
		this.init(name);
		this.users_so = SharedObject.get(this.prefix + "users", false);
	}

	// Extend FCVideoConference from FCComponent
	FCVideoConference.prototype = new FCComponent("FCVideoConference", FCVideoConference);
	
	// We work on a (0,0),(1,1) canonical region, the client side component
	// will map this to the appropriate screen coordinates. A step of 0.25
	// allows for arranging a 4x4 grid of video windows in the video chat area
	FCVideoConference.prototype.xstep = 0.25;
	FCVideoConference.prototype.ystep = 0.25;
	FCVideoConference.prototype.xnext = 0;
	FCVideoConference.prototype.ynext = 0;

	///////////////////////////////////////////////////////////////////////////
	// onXXX events that are called at appropriate times
	
	/** This is called when the application about to stop */
	FCVideoConference.prototype.onAppStop = function() {
	}


	/** This is called when a client disconnects */
	FCVideoConference.prototype.onDisconnect = function( client ) {
		this.close(client);
		
		// Need to call this at the end since we are overriding 
		// the base onDisconnect
		this.releaseLocalStorage(client);
	}
	
	
	///////////////////////////////////////////////////////////////////////////
	// Methods that a client side component calls explicitly
	
	/**
	 * Called by the client side component to start participating in a conference
	 */
	FCVideoConference.prototype.connect = function( client ) {
		var clocal  = this.getClientLocalStorage(client);
		clocal.id = "u" + this.getClientID(client);
		
		client.call( this.callPrefix + "setID", null, clocal.id );

		this.users_so.lock();		
		this.users_so.setProperty( clocal.id, {id:clocal.id} );
		this.users_so.setProperty( "pos_" + clocal.id, {x:this.xnext,y:this.ynext,id:clocal.id} );
		this.users_so.setProperty( "vis_" + clocal.id, {visible:null,id:clocal.id} );
		this.users_so.unlock();
		
		this.xystep();
	}
	
	/**
	 * Called by the client side component to stop participating in a conference
	 */
	FCVideoConference.prototype.close = function( client ) {
		var clocal  = this.getClientLocalStorage(client);
//trace( "removing " + clocal.id );
		this.users_so.setProperty( clocal.id, null );
		this.users_so.setProperty( "pos_" + clocal.id, null );
		this.users_so.setProperty( "vis_" + clocal.id, null );
	}
		
	// Insert additional methods here
	
	FCVideoConference.prototype.xystep = function() {
		this.xnext += this.xstep;
		
		if ( this.xnext >= 1 ) {
			this.xnext = 0;
			this.ynext += this.ystep;
		}
		
		if ( this.ynext >= 1 )
			this.ynext = 0;
	}
	
	trace( "VideoConference loaded successfully." );
} // #endif
