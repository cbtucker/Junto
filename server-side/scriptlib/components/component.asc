/**
 * Copyright 2005 Macromedia, Inc. All rights reserved.   
 * 
 * components.asc 
 * Moving or modifying this file may affect the applications installed on this server. 
 */

try { var dummy = FCComponent; } catch ( e ) { // #ifndef FCComponent

	load( "framework.asc" );

	/**
	 * Base class for all components
	 */
	FCComponent = function( derivedTypeName, derivedType ) {
		this.derivedTypeName = derivedTypeName;
		this.derivedType = derivedType;
	
		// Allow dynamic (on demand) instantiation
		derivedType.dynamic = true;
		derivedType.instances = new Object();
		
		// Provide a create method so non-dynamic classes can be created manually
		derivedType.create = function(name) { return this.instances[name] = new this(name); }
		
		// The listeners who are interested in all instance wide property changes
		derivedType.__LISTENERS__ = {};
		
		// Add an all instance wide property change listener
		derivedType.addListener = function( prop, cinst ) {
			if ( this.__LISTENERS__[prop] == null )
				this.__LISTENERS__[prop] = {};
	
			this.__LISTENERS__[prop][cinst.prefix] = cinst;
			for ( var i in this.instances )
				if ( typeof( this.instances[i] ) == "object" )
					this.instances[i].addListener( prop, cinst );
		}
		
		// Remove an all instance wide property change listener
		derivedType.removeListener = function( prop, cinst ) {
			if ( this.__LISTENERS__[prop] == null )
				return;
			
			delete this.__LISTENERS__[prop][cinst.prefix];
			for ( var i in this.instances )
				if ( typeof( this.instances[i] ) == "object" )
					this.instances[i].removeListener( prop, cinst );
					
			for ( var i in this.__LISTENERS__[prop] )
				if ( typeof( this.__LISTENERS__[prop][i] ) == "object" )
					return;
			
			// Ok, there are no more listeners for this prop
			delete this.__LISTENERS__[prop];
		}

		// Send a user defined event to 'all instance wide' listeners
		derivedType.sendUserEvent = function( eventName, eventData ) {
			if ( this.__LISTENERS__[eventName] != null )
				for ( var i in this.__LISTENERS__[eventName] )
					if ( this.__LISTENERS__[eventName][i]["on" + eventName] != null )
						this.__LISTENERS__[eventName][i]["on" + eventName]( null, {"name":eventName, "details":eventData} );
		}

		gFrameworkFC.registerComponent( derivedTypeName, derivedType );		
	}
	
	FCComponent.prototype.init = function(name) {
		this.name = name;
		
		this.prefix = this.derivedTypeName + "." + this.name + ".";
		
		// Unfortunately . does not work while calling clients
		this.callPrefix = this.derivedTypeName + "/" + this.name + "/";
		
		// Register all the existing 'all instance wide' listeners
		for( var i in this.derivedType.__LISTENERS__ )
			for ( var j in this.derivedType.__LISTENERS__[i] )
				if ( typeof( this.derivedType.__LISTENERS__[i][j] ) == "object" )
				this.addListener( i, this.derivedType.__LISTENERS__[i][j] );
	}

	FCComponent.prototype.getClientID = function( client ) {
		return client.__ID__;
	}

	FCComponent.prototype.getClientGlobalStorage = function( client ) {
		return gFrameworkFC.getClientGlobals(client);
	}

	FCComponent.prototype.getClientLocalStorage = function( client ) {
		if ( this.clientLocalStorage == null )
			this.clientLocalStorage = new Object();

		var cls = this.clientLocalStorage[client.__ID__];
		if ( cls == null )
			cls = this.clientLocalStorage[client.__ID__] = new Object();
		return cls;
	}

	/** Release any client local storage that was allocated */
	FCComponent.prototype.releaseLocalStorage = function( client ) {
		if ( this.clientLocalStorage != null )
			delete this.clientLocalStorage[client.__ID__];
	}
	
	/**
	 * Default onAppStop
	 */
	FCComponent.prototype.onAppStop = function() {
	}

	/** 
	  * Default onDisconnect. Derived components that are overriding this 
	  * method MUST call releaseLocalStorage to properly release any client 
	  * local storage that was allocated.
	  */
	FCComponent.prototype.onDisconnect = function( client ) {
		this.releaseLocalStorage(client);
	}
	
	// A common watch function used by all components
	FCComponent.onWatch = function( prop, oldValue, newValue ) {
		if ( this.__LISTENERS__[prop] == null )
			return;
			
		for ( var i in this.__LISTENERS__[prop] ) {
			if ( this.__LISTENERS__[prop][i]["onPropertyChange"] != null )
				this.__LISTENERS__[prop][i].onPropertyChange( this, {"name":prop, "oldValue":oldValue, "newValue":newValue} );
		}
		
		return newValue;
	}
	
	// Add an instance specific property change listener
	FCComponent.prototype.addListener = function( prop, cinst ) {

		// Add the listeners array if necessary, note we must
		// do this here. If we add it directly to the prototype
		// it becomes a static member.
		if ( this["__LISTENERS__"] == null )
			this["__LISTENERS__"] = {};

		if ( this.__LISTENERS__[prop] == null ) {
			this.__LISTENERS__[prop] = {};
			this.watch( prop, FCComponent.onWatch );
		}
		
		this.__LISTENERS__[prop][cinst.prefix] = cinst;
	}
	
	// Remove an instance specific property change listener
	FCComponent.prototype.removeListener = function( prop, cinst ) {

		if ( this.__LISTENERS__[prop] != null &&
			 ( this.derivedType.__LISTENERS__[prop] == null ||
			   this.derivedType.__LISTENERS__[prop][cinst.prefix] == null ) ) {
			
			// This not an instance wide listener so remove it		
			delete this.__LISTENERS__[prop][cinst.prefix];
			
			// Check if there are others interested in this prop
			for ( var i in this.__LISTENERS__[prop] )
				if ( typeof( this.__LISTENERS__[prop][i] ) == "object" )
					return;
			
			// Ok, so there are no more listeners so unwatch
			delete this.__LISTENERS__[prop];
			this.unwatch( prop );
		}			
	}

	// Send a user defined event to instance specific listeners
	FCComponent.prototype.sendUserEvent = function( eventName, eventData ) {
		if ( this.__LISTENERS__[eventName] != null )
			for ( var i in this.__LISTENERS__[eventName] )
				if ( this.__LISTENERS__[eventName][i]["on" + eventName] != null )
					this.__LISTENERS__[eventName][i]["on" + eventName]( this, {"name":eventName, "details":eventData} );
	}

	trace( "Base Component loaded successfully." );
} // #endif
