/**
 * Copyright 2005 Macromedia, Inc. All rights reserved.
 *
 * chat.asc
 * Moving or modifying this file may affect the applications installed on this server.
 */

try { var dummy = FCChat; } catch ( e ) { // #ifndef FCChat

	load( "components/component.asc" );

	/**
	 * Chat component class
	 */
	FCChat = function(name) {

		this.init(name);

		// Get a non persistent shared object for sending broadcasts
		this.message_so = SharedObject.get( this.prefix + "message", false );

		// If persist is true, then get the history back
		this.history_so = SharedObject.get( this.prefix + "history", this.persist );
		this.history = this.history_so.getProperty( "history" );
		if ( this.history == null )
			this.history = new Array;

	}

	// All named instances are held in instances
	FCChat.prototype = new FCComponent("FCChat",FCChat);

	FCChat.prototype.histlen    = 250;			// Maximum history length
	FCChat.prototype.persist    = true;			// Whether to save history
	FCChat.prototype.allowClear = true;			// Allow clients to clear history

	FCChat.prototype.history    = new Array;	// History
	FCChat.prototype.message_so = null;			// Message broadcasts
	FCChat.prototype.history_so = null;			// History persistence

	///////////////////////////////////////////////////////////////////////////
	// onXXX events that are called at appropriate times

	// This is called when the application about to stop
	FCChat.prototype.onAppStop = function() {
		if ( this.persist && this.history_so != null ) {
			this.history_so.setProperty( "history", this.history );
			this.history_so.flush();
		}
	}

	///////////////////////////////////////////////////////////////////////////
	// Methods that a client side component calls explicitly

	// The first method called by a client component
	FCChat.prototype.connect = function( client ) {

		var cglobal = this.getClientGlobalStorage(client);

		if (!cglobal.usercolor) {
			cglobal.usercolor = "0x000000";
		}

		client.call( this.callPrefix + "receiveHistory", null, this.history );
		client.call( this.callPrefix + "setUsername", null, cglobal.username);
	}

	// The last method called by a client component
	FCChat.prototype.close = function( client ) {
	}

	// send a message to all others participating in the chat session
	FCChat.prototype.sendMessage = function( client, mesg ) {

		var cglobal = this.getClientGlobalStorage(client);

		mesg = this.hiliteURLs(mesg);

		var hexColor = "#"+cglobal.usercolor.substring(2, cglobal.usercolor.length)

		mesg = "<font color=\"" + hexColor + "\"><b>" + cglobal.username + ": </b>" + mesg + "</font><br>\n";
		this.history.push( mesg );
		while ( this.history.length > this.histlen )
			this.history.shift();

		this.message_so.send( "message", mesg );
	}

	// Clear the history
	FCChat.prototype.clearHistory = function( client ) {
		// If this is client request check if it is allowed
		if ( client != null && !this.allowClear )
			return false;

		this.history_so.setProperty( "history", null );
		this.history_so.flush();
		delete this.history;
		this.history = new Array;

		// Broadcast a clearHistory command to all clients
		this.message_so.send( "clearHistory" );
		return true;
	}

	///////////////////////////////////////////////////////////////////////////
	// Helper and utility methods

	// Save the history
	FCChat.prototype.saveHistory = function() {
		this.history_so.setProperty( "history", this.history );
		this.history_so.flush();
	}

	// Hilight the urls in a message
	FCChat.prototype.hiliteURLs = function(msg)
	{

		//+
		//escape all <
		//-
		var escaped = "";
		var ltPos = msg.indexOf("<");
		while (ltPos != -1) {
			escaped = msg.substring(0, ltPos) + "&lt;" + msg.substring(ltPos+1,msg.length);
			//trace ("escaped: "+escaped);
			msg = escaped;
			ltPos = msg.indexOf("<");
		}

		//+
		//escape all >
		//-
		var escaped = "";
		var ltPos = msg.indexOf(">");
		while (ltPos != -1) {
			escaped = msg.substring(0, ltPos) + "&gt;" + msg.substring(ltPos+1,msg.length);
			//trace ("escaped: "+escaped);
			msg = escaped;
			ltPos = msg.indexOf(">");
		}

		//+
		//highlight urls
		//-
		var url_begin = msg.indexOf("http:");
		if ( url_begin == -1 )
			url_begin = msg.indexOf("www.");

		if ( url_begin == -1 )
			return msg;

		var hilited = msg.substring(0, url_begin);
		var url_end = msg.indexOf( " ", url_begin );

		var urlstr = "";
		if ( url_end == -1 )
			urlstr = msg.substring(url_begin);
		else
			urlstr = msg.substring(url_begin, url_end);

		var urlref = urlstr;
		if ( urlstr.indexOf("www.") == 0 )
			urlref = "http://" + urlstr;

		var trailer = "";
		if ( url_end != -1 )
			trailer = this.hiliteURLs( msg.substring(url_end) );

		hilited += "<font color=\"#0000FF\"><u><a href=\"" + urlref + "\" target=\"_blank\">" + urlstr + "</a></u></font>" + trailer;
		//hilited += "<font color=\"#0000FF\"><u><a href=\"" + urlstr + "\">" + urlstr + "</a></u></font>" + trailer;

		return hilited;
	}

	trace( "Chat loaded successfully." );

} // #endif