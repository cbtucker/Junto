/**
 * Copyright 2005 Macromedia, Inc. All rights reserved.   
 * 
 * audioconference.asc 
 * Moving or modifying this file may affect the applications installed on this server. 
 */

try { var dummy = FCAudioConference; } catch ( e ) { // #ifndef FCAudioConference

	load( "components/component.asc" );
	
	//
	// Audio Conference component class
	//
	FCAudioConference = function(name) {
		this.init(name);

		// Get a non persistant shared object for the list of audio users
		this.audio_so = SharedObject.get( this.prefix + "audio", false );
	}
	
	// All named instances are held in instances
	FCAudioConference.prototype = new FCComponent("FCAudioConference", FCAudioConference);
	
	FCAudioConference.prototype.audio_so	= null;			// Audio SharedObject
	
	///////////////////////////////////////////////////////////////////////////
	// onXXX events that are called at appropriate times
	
	// This is called when a client disconnects
	FCAudioConference.prototype.onDisconnect = function( client ) {
		var clocal = this.getClientLocalStorage(client);
		this.audio_so.setProperty(clocal.id, null);

		// Need to call this at the end since we are overriding 
		// the base onDisconnect
		this.releaseLocalStorage(client);
	}
	
	///////////////////////////////////////////////////////////////////////////
	// Methods that a client side component calls explicitly
	
	// The first method called by a client component
	FCAudioConference.prototype.connect = function( client ) {
		var clocal = this.getClientLocalStorage(client);
		var cglobal = this.getClientGlobalStorage(client);
		clocal.id = "u" + this.getClientID(client);
		
		client.call(this.callPrefix + "setUsername", null, cglobal.username);
		client.call(this.callPrefix + "startStream", null, clocal.id);
		var nameArray = new Array(cglobal.username, false);
		this.audio_so.setProperty(clocal.id, nameArray);
	}
	
	// The last method called by a client component
	FCAudioConference.prototype.close = function( client ) {
	}
	

	///////////////////////////////////////////////////////////////////////////
	// Helper and utility methods

	FCAudioConference.prototype.changeName = function(client) {
		var cglobal = this.getClientGlobalStorage(client);
		var clocal = this.getClientLocalStorage(client);
		var nameArray = new Array(cglobal.username, this.audio_so.getProperty(clocal.id)[1]);
		this.audio_so.setProperty(clocal.id, nameArray);
	};
	
	trace( "AudioConference loaded successfully." );

} // #endif
