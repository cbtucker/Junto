/**
 * Copyright 2005 Macromedia, Inc. All rights reserved.   
 * 
 * simpleconnect.asc 
 * Moving or modifying this file may affect the applications installed on this server. 
 */

try { var dummy = FCSimpleConnect; } catch ( e ) { // #ifndef FCSimpleConnect

	load( "components/component.asc" );
	
	//
	// Simple Connect component class
	//
	FCSimpleConnect = function(name) {
		this.init(name);
		
		// Get a non persistent shared object for the list of users
		this.users_so = SharedObject.get( this.prefix + "users", false );
	}
	
	// All named instances are held in instances
	FCSimpleConnect.prototype = new FCComponent("FCSimpleConnect", FCSimpleConnect);

	FCSimpleConnect.prototype.users_so	= null;			// Users SharedObject
	
	///////////////////////////////////////////////////////////////////////////
	// onXXX events that are called at appropriate times


	// This is called when a client disconnects
	FCSimpleConnect.prototype.onDisconnect = function( client ) {
		// get per client global storage
		var clocal = this.getClientLocalStorage(client);
		this.users_so.setProperty(clocal.id, null);

		// Need to call this at the end since we are overriding 
		// the base onDisconnect
		this.releaseLocalStorage(client);
	}
	
	
	///////////////////////////////////////////////////////////////////////////
	// Methods that a client side component calls explicitly
	
	// The first method called by a client component
	FCSimpleConnect.prototype.connect = function( client, username ) {
		var clocal = this.getClientLocalStorage(client);
		var cglobal = this.getClientGlobalStorage(client);
		
		cglobal.username = username;
		clocal.id = "u" + this.getClientID(client);
		this.users_so.setProperty(clocal.id, cglobal.username);
		//trace("Client Connecting: " + clocal.id + ", " + cglobal.username);
		return clocal.id;
	}
	
	// The last method called by a client component
	FCSimpleConnect.prototype.close = function( client ) {
	}
	

	///////////////////////////////////////////////////////////////////////////
	// Helper and utility methods

	FCSimpleConnect.prototype.changeName = function(client, newName) {
		//trace("New Name: " + newName);
		this.getClientGlobalStorage(client).username = newName;
		client.call(this.callPrefix + "changedName", null, newName);
	}
	
	trace( "SimpleConnect loaded successfully." );

} // #endif
